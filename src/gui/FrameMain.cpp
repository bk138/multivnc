// -*- C++ -*-
//
// generated by wxGlade 1.0.4 on Sat Dec 28 19:37:55 2024
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//

#include <wx/wx.h>
#include "FrameMain.h"

// begin wxGlade: ::extracode
// end wxGlade


FrameMain::FrameMain(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE)
{
    // begin wxGlade: FrameMain::FrameMain
    SetSize(wxSize(1089, 1030));
    SetTitle(_("MultiVNC"));
    wxIcon _icon;
    _icon.CopyFromBitmap(wxICON(icon));
    SetIcon(_icon);
    frame_main_menubar = new wxMenuBar();
    wxMenu *wxglade_tmp_menu;
    wxglade_tmp_menu = new wxMenu();
    wxglade_tmp_menu->Append(wxID_YES, _("&Connect...\tCtrl-T"), _("Connect to a specific host."));
    Bind(wxEVT_MENU, &FrameMain::machine_connect, this, wxID_YES);
    wxglade_tmp_menu->Append(wxID_REDO, _("&Listen"), _("Listen for an incoming connection."));
    Bind(wxEVT_MENU, &FrameMain::machine_listen, this, wxID_REDO);
    wxglade_tmp_menu->Append(wxID_STOP, _("&Disconnect"), _("Terminate connection."));
    Bind(wxEVT_MENU, &FrameMain::machine_disconnect, this, wxID_STOP);
    wxglade_tmp_menu->Append(wxID_FILE, _("Show &Log"), _("Show detailed log."));
    Bind(wxEVT_MENU, &FrameMain::machine_showlog, this, wxID_FILE);
    wxglade_tmp_menu->Append(wxID_PREFERENCES, wxEmptyString, _("Change preferences."));
    Bind(wxEVT_MENU, &FrameMain::machine_preferences, this, wxID_PREFERENCES);
    wxglade_tmp_menu->Append(wxID_SAVE, _("Take Screenshot"), wxEmptyString);
    Bind(wxEVT_MENU, &FrameMain::machine_screenshot, this, wxID_SAVE);
    wxglade_tmp_menu->Append(ID_STATS_SAVE, _("Save Statistics..."), wxEmptyString);
    Bind(wxEVT_MENU, &FrameMain::machine_save_stats, this, ID_STATS_SAVE);
    wxglade_tmp_menu->Append(ID_INPUT_RECORD, _("Record Input"), wxEmptyString);
    Bind(wxEVT_MENU, &FrameMain::machine_input_record, this, ID_INPUT_RECORD);
    wxglade_tmp_menu->Append(ID_INPUT_REPLAY, _("Replay Input"), wxEmptyString);
    Bind(wxEVT_MENU, &FrameMain::machine_input_replay, this, ID_INPUT_REPLAY);
    wxglade_tmp_menu->AppendSeparator();
    wxglade_tmp_menu->Append(wxID_EXIT, wxEmptyString, _("Exit MultiVNC."));
    Bind(wxEVT_MENU, &FrameMain::machine_exit, this, wxID_EXIT);
    frame_main_menubar->Append(wxglade_tmp_menu, _("&Machine"));
    wxglade_tmp_menu = new wxMenu();
    wxglade_tmp_menu->Append(ID_TOOLBAR, _("Toolbar"), wxEmptyString, wxITEM_CHECK);
    Bind(wxEVT_MENU, &FrameMain::view_toggletoolbar, this, ID_TOOLBAR);
    wxglade_tmp_menu->Append(ID_DISCOVERED, _("Discovered Servers"), wxEmptyString, wxITEM_CHECK);
    Bind(wxEVT_MENU, &FrameMain::view_togglediscovered, this, ID_DISCOVERED);
    wxglade_tmp_menu->Append(ID_BOOKMARKS, _("Bookmarks"), wxEmptyString, wxITEM_CHECK);
    Bind(wxEVT_MENU, &FrameMain::view_togglebookmarks, this, ID_BOOKMARKS);
    wxglade_tmp_menu->Append(ID_STATISTICS, _("Statistics"), wxEmptyString, wxITEM_CHECK);
    Bind(wxEVT_MENU, &FrameMain::view_togglestatistics, this, ID_STATISTICS);
    wxMenu* wxglade_tmp_menu_sub = new wxMenu();
    wxglade_tmp_menu_sub->Append(ID_SEAMLESS_NORTH, _("North"), wxEmptyString, wxITEM_RADIO);
    Bind(wxEVT_MENU, &FrameMain::view_seamless, this, ID_SEAMLESS_NORTH);
    wxglade_tmp_menu_sub->Append(ID_SEAMLESS_EAST, _("East"), wxEmptyString, wxITEM_RADIO);
    Bind(wxEVT_MENU, &FrameMain::view_seamless, this, ID_SEAMLESS_EAST);
    wxglade_tmp_menu_sub->Append(ID_SEAMLESS_WEST, _("West"), wxEmptyString, wxITEM_RADIO);
    Bind(wxEVT_MENU, &FrameMain::view_seamless, this, ID_SEAMLESS_WEST);
    wxglade_tmp_menu_sub->Append(ID_SEAMLESS_SOUTH, _("South"), wxEmptyString, wxITEM_RADIO);
    Bind(wxEVT_MENU, &FrameMain::view_seamless, this, ID_SEAMLESS_SOUTH);
    wxglade_tmp_menu_sub->Append(ID_SEAMLESS_DISABLED, _("Disabled"), wxEmptyString, wxITEM_RADIO);
    Bind(wxEVT_MENU, &FrameMain::view_seamless, this, ID_SEAMLESS_DISABLED);
    wxglade_tmp_menu->Append(ID_SEAMLESS, _("Edge Connector"), wxglade_tmp_menu_sub, wxEmptyString);
    wxglade_tmp_menu->AppendSeparator();
    wxglade_tmp_menu->Append(ID_FULLSCREEN, _("Fullscreen\tF11"), wxEmptyString, wxITEM_CHECK);
    Bind(wxEVT_MENU, &FrameMain::view_togglefullscreen, this, ID_FULLSCREEN);
    wxglade_tmp_menu->Append(ID_ONE_TO_ONE, _("View 1:1"), wxEmptyString, wxITEM_CHECK);
    Bind(wxEVT_MENU, &FrameMain::view_toggle1to1, this, ID_ONE_TO_ONE);
    frame_main_menubar->Append(wxglade_tmp_menu, _("&View"));
    wxglade_tmp_menu = new wxMenu();
    wxglade_tmp_menu->Append(wxID_ADD, _("&Add Bookmark"), wxEmptyString);
    Bind(wxEVT_MENU, &FrameMain::bookmarks_add, this, wxID_ADD);
    frame_main_menubar->Append(wxglade_tmp_menu, _("&Bookmarks"));
    wxglade_tmp_menu = new wxMenu();
    wxglade_tmp_menu->Append(wxID_UP, _("&Share a Window"), _("Beam a window to the server."));
    Bind(wxEVT_MENU, &FrameMain::windowshare_start, this, wxID_UP);
    wxglade_tmp_menu->Append(wxID_CANCEL, _("S&top Sharing Window"), _("Stop Window Sharing."));
    Bind(wxEVT_MENU, &FrameMain::windowshare_stop, this, wxID_CANCEL);
    frame_main_menubar->Append(wxglade_tmp_menu, _("Window &Sharing"));
    wxglade_tmp_menu = new wxMenu();
    wxglade_tmp_menu->Append(wxID_HELP, _("&Contents"), _("Show Help."));
    Bind(wxEVT_MENU, &FrameMain::help_contents, this, wxID_HELP);
    wxglade_tmp_menu->Append(ID_ISSUE_LIST, _("Request a Feature / Report a Bug"), wxEmptyString);
    Bind(wxEVT_MENU, &FrameMain::help_issue_list, this, ID_ISSUE_LIST);
    wxglade_tmp_menu->Append(wxID_ABOUT, wxEmptyString, wxEmptyString);
    Bind(wxEVT_MENU, &FrameMain::help_about, this, wxID_ABOUT);
    frame_main_menubar->Append(wxglade_tmp_menu, _("&Help"));
    SetMenuBar(frame_main_menubar);
    frame_main_statusbar = CreateStatusBar(1);
    int frame_main_statusbar_widths[] = { -1 };
    frame_main_statusbar->SetStatusWidths(1, frame_main_statusbar_widths);
    
    // statusbar fields
    const wxString frame_main_statusbar_fields[] = {
        _("Status"),
    };
    for(int i = 0; i < frame_main_statusbar->GetFieldsCount(); ++i) {
        frame_main_statusbar->SetStatusText(frame_main_statusbar_fields[i], i);
    }
    frame_main_toolbar = new wxToolBar(this, -1, wxDefaultPosition, wxDefaultSize, wxTB_HORIZONTAL|wxTB_TEXT|wxTB_NODIVIDER);
    SetToolBar(frame_main_toolbar);
    frame_main_toolbar->AddTool(wxID_YES, _("Connect"), bitmapBundleFromSVGResource(wxString(wxSystemSettings::GetAppearance().IsDark() ? "dark" : "light") + "/" + "connect"), wxNullBitmap, wxITEM_NORMAL, _("Connect to a specific host."), wxEmptyString);
    Bind(wxEVT_MENU, &FrameMain::machine_connect, this, wxID_YES);
    frame_main_toolbar->AddTool(wxID_REDO, _("Listen"), bitmapBundleFromSVGResource(wxString(wxSystemSettings::GetAppearance().IsDark() ? "dark" : "light") + "/" + "listen"), wxNullBitmap, wxITEM_NORMAL, _("Listen for an incoming connection."), wxEmptyString);
    Bind(wxEVT_MENU, &FrameMain::machine_listen, this, wxID_REDO);
    frame_main_toolbar->AddSeparator();
    frame_main_toolbar->AddTool(wxID_STOP, _("Disconnect"), bitmapBundleFromSVGResource(wxString(wxSystemSettings::GetAppearance().IsDark() ? "dark" : "light") + "/" + "disconnect"), wxNullBitmap, wxITEM_NORMAL, _("Terminate connection."), wxEmptyString);
    Bind(wxEVT_MENU, &FrameMain::machine_disconnect, this, wxID_STOP);
    frame_main_toolbar->AddTool(ID_GRABKEYBOARD, _("Grab Keyboard"), bitmapBundleFromSVGResource(wxString(wxSystemSettings::GetAppearance().IsDark() ? "dark" : "light") + "/" + "toggle-keyboard-grab"), wxNullBitmap, wxITEM_CHECK, _("Intercept all keyboard input. Allows you to use special keys that would otherwise be interpreted by the local computer."), wxEmptyString);
    Bind(wxEVT_MENU, &FrameMain::machine_grabkeyboard, this, ID_GRABKEYBOARD);
    frame_main_toolbar->AddTool(wxID_SAVE, _("Take Screenshot"), bitmapBundleFromSVGResource(wxString(wxSystemSettings::GetAppearance().IsDark() ? "dark" : "light") + "/" + "screenshot"), wxNullBitmap, wxITEM_NORMAL, _("Take a screenshot of the current connection."), wxEmptyString);
    Bind(wxEVT_MENU, &FrameMain::machine_screenshot, this, wxID_SAVE);
    frame_main_toolbar->AddSeparator();
    frame_main_toolbar->AddTool(ID_INPUT_RECORD, _("Record Input"), bitmapBundleFromSVGResource(wxString(wxSystemSettings::GetAppearance().IsDark() ? "dark" : "light") + "/" + "record"), wxNullBitmap, wxITEM_NORMAL, _("Record mouse and keyboard input for later replay as a macro."), wxEmptyString);
    Bind(wxEVT_MENU, &FrameMain::machine_input_record, this, ID_INPUT_RECORD);
    frame_main_toolbar->AddTool(ID_INPUT_REPLAY, _("Replay Input"), bitmapBundleFromSVGResource(wxString(wxSystemSettings::GetAppearance().IsDark() ? "dark" : "light") + "/" + "replay"), wxNullBitmap, wxITEM_NORMAL, _("Replay a recorded mouse and keyboard input macro. If <Shift> is held down while clicking this button, the macro is replayed in a loop."), wxEmptyString);
    Bind(wxEVT_MENU, &FrameMain::machine_input_replay, this, ID_INPUT_REPLAY);
    frame_main_toolbar->AddSeparator();
    frame_main_toolbar->AddTool(ID_ONE_TO_ONE, _("View 1:1"), bitmapBundleFromSVGResource(wxString(wxSystemSettings::GetAppearance().IsDark() ? "dark" : "light") + "/" + "one-to-one"), wxNullBitmap, wxITEM_CHECK, _("Toggle 1:1 view, disabling all scaling."), wxEmptyString);
    Bind(wxEVT_MENU, &FrameMain::view_toggle1to1, this, ID_ONE_TO_ONE);
    frame_main_toolbar->AddTool(ID_FULLSCREEN, _("Fullscreen"), bitmapBundleFromSVGResource(wxString(wxSystemSettings::GetAppearance().IsDark() ? "dark" : "light") + "/" + "fullscreen"), wxNullBitmap, wxITEM_NORMAL, _("Toggle fullscreen view."), wxEmptyString);
    Bind(wxEVT_MENU, &FrameMain::view_togglefullscreen, this, ID_FULLSCREEN);
    frame_main_toolbar->Realize();
    wxBoxSizer* sizer_top = new wxBoxSizer(wxHORIZONTAL);
    panel_top = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxBORDER_STATIC|wxTAB_TRAVERSAL);
    sizer_top->Add(panel_top, 1, wxEXPAND, 0);
    wxBoxSizer* sizer_splitwinmain = new wxBoxSizer(wxHORIZONTAL);
    splitwin_main = new wxSplitterWindow(panel_top, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSP_LIVE_UPDATE);
    splitwin_main->SetMinimumPaneSize(20);
    sizer_splitwinmain->Add(splitwin_main, 1, wxALL|wxEXPAND, 3);
    splitwin_main_pane_1 = new wxPanel(splitwin_main, wxID_ANY);
    splitwin_main_pane_1->SetMinSize(wxSize(200, -1));
    wxBoxSizer* sizer_2 = new wxBoxSizer(wxHORIZONTAL);
    splitwin_left = new wxSplitterWindow(splitwin_main_pane_1, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSP_LIVE_UPDATE);
    splitwin_left->SetMinimumPaneSize(20);
    sizer_2->Add(splitwin_left, 1, wxALL|wxEXPAND, 3);
    splitwin_left_pane_1 = new wxPanel(splitwin_left, wxID_ANY);
    wxStaticBoxSizer* sizer_services = new wxStaticBoxSizer(new wxStaticBox(splitwin_left_pane_1, wxID_ANY, _("Available VNC Servers")), wxHORIZONTAL);
    const wxString *list_box_services_choices = NULL;
    list_box_services = new wxListBox(splitwin_left_pane_1, ID_LISTBOX_SERVICES, wxDefaultPosition, wxDefaultSize, 0, list_box_services_choices, wxLB_HSCROLL|wxLB_NEEDED_SB|wxLB_SINGLE);
    sizer_services->Add(list_box_services, 1, wxALL|wxEXPAND, 3);
    splitwin_left_pane_2 = new wxPanel(splitwin_left, wxID_ANY);
    wxStaticBoxSizer* sizer_bookmarks = new wxStaticBoxSizer(new wxStaticBox(splitwin_left_pane_2, wxID_ANY, _("Bookmarks")), wxHORIZONTAL);
    const wxString *list_box_bookmarks_choices = NULL;
    list_box_bookmarks = new wxListBox(splitwin_left_pane_2, ID_LISTBOX_BOOKMARKS, wxDefaultPosition, wxDefaultSize, 0, list_box_bookmarks_choices, wxLB_HSCROLL|wxLB_NEEDED_SB|wxLB_SINGLE);
    sizer_bookmarks->Add(list_box_bookmarks, 1, wxALL|wxEXPAND, 3);
    splitwin_main_pane_2 = new wxPanel(splitwin_main, wxID_ANY);
    wxBoxSizer* sizer_notebook = new wxBoxSizer(wxHORIZONTAL);
    notebook_connections = new wxNotebook(splitwin_main_pane_2, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0);
    sizer_notebook->Add(notebook_connections, 1, wxALL|wxEXPAND, 3);
    
    splitwin_main_pane_2->SetSizer(sizer_notebook);
    splitwin_left_pane_2->SetSizer(sizer_bookmarks);
    splitwin_left_pane_1->SetSizer(sizer_services);
    splitwin_left->SplitHorizontally(splitwin_left_pane_1, splitwin_left_pane_2);
    splitwin_main_pane_1->SetSizer(sizer_2);
    splitwin_main->SplitVertically(splitwin_main_pane_1, splitwin_main_pane_2, 31);
    panel_top->SetSizer(sizer_splitwinmain);
    SetSizer(sizer_top);
    Layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(FrameMain, wxFrame)
    // begin wxGlade: FrameMain::event_table
    EVT_LISTBOX(ID_LISTBOX_SERVICES, FrameMain::listbox_services_select)
    EVT_LISTBOX_DCLICK(ID_LISTBOX_SERVICES, FrameMain::listbox_services_dclick)
    EVT_LISTBOX(ID_LISTBOX_BOOKMARKS, FrameMain::listbox_bookmarks_select)
    EVT_LISTBOX_DCLICK(ID_LISTBOX_BOOKMARKS, FrameMain::listbox_bookmarks_dclick)
    EVT_NOTEBOOK_PAGE_CHANGED(wxID_ANY, FrameMain::notebook_connections_pagechanged)
    // end wxGlade
END_EVENT_TABLE();


void FrameMain::machine_connect(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::machine_connect) not implemented yet"));
}

void FrameMain::machine_listen(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::machine_listen) not implemented yet"));
}

void FrameMain::machine_disconnect(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::machine_disconnect) not implemented yet"));
}

void FrameMain::machine_showlog(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::machine_showlog) not implemented yet"));
}

void FrameMain::machine_preferences(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::machine_preferences) not implemented yet"));
}

void FrameMain::machine_screenshot(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::machine_screenshot) not implemented yet"));
}

void FrameMain::machine_save_stats(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::machine_save_stats) not implemented yet"));
}

void FrameMain::machine_input_record(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::machine_input_record) not implemented yet"));
}

void FrameMain::machine_input_replay(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::machine_input_replay) not implemented yet"));
}

void FrameMain::machine_exit(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::machine_exit) not implemented yet"));
}

void FrameMain::view_toggletoolbar(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::view_toggletoolbar) not implemented yet"));
}

void FrameMain::view_togglediscovered(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::view_togglediscovered) not implemented yet"));
}

void FrameMain::view_togglebookmarks(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::view_togglebookmarks) not implemented yet"));
}

void FrameMain::view_togglestatistics(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::view_togglestatistics) not implemented yet"));
}

void FrameMain::view_seamless(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::view_seamless) not implemented yet"));
}

void FrameMain::view_togglefullscreen(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::view_togglefullscreen) not implemented yet"));
}

void FrameMain::view_toggle1to1(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::view_toggle1to1) not implemented yet"));
}

void FrameMain::bookmarks_add(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::bookmarks_add) not implemented yet"));
}

void FrameMain::windowshare_start(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::windowshare_start) not implemented yet"));
}

void FrameMain::windowshare_stop(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::windowshare_stop) not implemented yet"));
}

void FrameMain::help_contents(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::help_contents) not implemented yet"));
}

void FrameMain::help_issue_list(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::help_issue_list) not implemented yet"));
}

void FrameMain::help_about(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::help_about) not implemented yet"));
}

void FrameMain::machine_grabkeyboard(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::machine_grabkeyboard) not implemented yet"));
}

void FrameMain::listbox_services_select(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::listbox_services_select) not implemented yet"));
}

void FrameMain::listbox_services_dclick(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::listbox_services_dclick) not implemented yet"));
}

void FrameMain::listbox_bookmarks_select(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::listbox_bookmarks_select) not implemented yet"));
}

void FrameMain::listbox_bookmarks_dclick(wxCommandEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::listbox_bookmarks_dclick) not implemented yet"));
}

void FrameMain::notebook_connections_pagechanged(wxBookCtrlEvent &event)  // wxGlade: FrameMain.<event_handler>
{
    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (FrameMain::notebook_connections_pagechanged) not implemented yet"));
}


// wxGlade: add FrameMain event handlers

